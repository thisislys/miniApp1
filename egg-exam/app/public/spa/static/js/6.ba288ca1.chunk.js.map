{"version":3,"sources":["service/questionsManger.js","service/examManger.js","model/addExam/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","getVlueateList","createExam","updateExam","getExamList","getExamDetail","studentPaper","correction","_ref","grade_id","examInfo","_ref2","id","question_ids","exam_id","paper_id","_ref3","score","requestData","Promise","all","initState","examType","questionsType","subject","examList","examDetail","JSON","parse","window","localStorage","getItem","namespace","state","reducers","initData","Object","_Users_liuyu_react_exam_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","setDetail","detail","setItem","stringify","assign","effects","_Users_liuyu_react_exam_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","action","call","put","result","keys","wrap","_context","prev","next","sent","forEach","item","key","data","type","stop","this","end_time","start_time","subject_id","title","_ref2$number","number","_context2","abrupt","resolve","_ref4","_ref5","_context3","_ref6","_ref7","_context4"],"mappings":"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","file":"static/js/6.ba288ca1.chunk.js","sourcesContent":["import request from '../utils/request'\n// 获取所有的考试类型\nexport function getAllExamType(){\n    return request('/exam/examType');\n}\n// 获取所有的试题类型\nexport function getAllQuestionsType(){\n    return request('/exam/getQuestionsType');\n}\n// 获取所有的课程\nexport function getAllSubject(){\n    return request('/exam/subject');\n}\n// 添加试题\nexport function addQuestions(questionsInfo){\n    return request('/exam/questions',{\n        method:'POST',\n        body:questionsInfo,\n    });\n}\n// 获取试题\nexport function getQusetions(payload){\n    let arr = [];\n    for(let i in payload){\n        if (payload[i]) {\n            arr.push(`${i}=${payload[i]}`);\n        }\n    }\n    let str = '?'+arr.join('&');\n    console.log(str)\n    return request(`/exam/questions/condition${str}`);\n}\n\n// 更新试题\n\nexport function updateQUestions(updated){\n    return request('/exam/questions/update',{\n        method:'PUT',\n        body:updated\n    });\n}","import request from '../utils/request'\n\n// 试卷列表\nexport function getVlueateList({ grade_id }) {\n  console.log(grade_id)\n  return request('/exam/student?grade_id=' + grade_id);\n}\n\nexport function createExam(examInfo) {\n  return request('/exam/exam', {\n    method: 'POST',\n    body: examInfo,\n  });\n}\n\nexport function updateExam({ id, question_ids }) {\n  return request('/exam/exam/' + id, {\n    method: 'PUT',\n    body: { question_ids: question_ids },\n  });\n}\n\nexport function getExamList(examInfo) {\n  return request('/exam/exam', {\n    method: 'GET'\n  });\n}\n\nexport function getExamDetail(exam_id) {\n  return request('/exam/exam/' + exam_id, {\n    method: 'GET'\n  });\n}\n\nexport function studentPaper(paper_id) {\n  return request('/exam/student/' + paper_id, {\n    method: 'GET'\n  });\n}\n\nexport function correction({ paper_id, score }) {\n  return request('/exam/student/' + paper_id, {\n    method: 'PUT',\n    body: {\n      score\n    }\n  });\n}","import { getAllExamType, getAllQuestionsType, getAllSubject } from '@/service/questionsManger'\nimport { createExam, updateExam, getExamDetail } from '@/service/examManger'\n\nconst requestData = () => {\n  return Promise.all([\n    getAllExamType(),\n    getAllQuestionsType(),\n    getAllSubject()\n  ]);\n}\n\nconst initState = {\n  examType:[],\n  questionsType:[],\n  subject:[],\n  examList: [],\n  examDetail: JSON.parse(window.localStorage.getItem('exam')) || {}\n};\n\n\nexport default {\n  namespace: 'addExam',\n\n  state: initState,\n\n  reducers: {\n    initData (state, payload) { // 初始化数据\n      return {...state, ...payload}\n    },\n    setDetail (state, detail) {\n      window.localStorage.setItem('exam', JSON.stringify(detail))\n      return Object.assign({}, state, {\n        examDetail: detail\n      })\n    }\n  },\n\n  effects: {\n    *requestData (action, {call, put}) {\n      let result = yield call(requestData);\n      let keys = ['examType','questionsType','subject'];\n      let payload = {};\n      result.forEach((item,key)=>{\n          if(item){\n              payload[keys[key]] = item.data;\n          }\n      });\n      yield put({type:'initData',...payload});\n    },\n\n    *createExam ({end_time, exam_id, start_time, subject_id, title, number = 3}, {call, put}) {\n      let result = yield call(createExam, {\n        end_time, exam_id, start_time, subject_id, number, title\n      })\n      yield put({type: 'setDetail', ...result.data})\n      // yield put(routerRedux.push({\n      //   path: basePath + '/main/exam/edit',\n      //   state:{\n      //     parent:'考试管理',\n      //     child:'创建试卷',\n      //     id:'main-examEdit'\n      //   }\n      // }))\n      return Promise.resolve()\n    },\n\n    *updateExam ({id, question_ids}, {call, put}) {\n      let result = yield call(updateExam, {\n        id, question_ids\n      })\n      return Promise.resolve(result)\n    },\n\n    *getExamDetail ({exam_id}, {call, put}) {\n      let result = yield call(getExamDetail, exam_id)\n      yield put({type: 'setDetail', ...result.data})\n    }\n  }\n}"],"sourceRoot":""}