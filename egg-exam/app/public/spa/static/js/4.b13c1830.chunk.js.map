{"version":3,"sources":["service/questionsManger.js","model/addQuestions/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","requestData","Promise","all","namespace","state","examType","exam_id","questionsType","questions_type_id","subject","subject_id","title","questions_stem","questions_answer","addStatus","updatedStatus","reducers","initData","Object","_Users_liuyu_react_exam_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","effects","getQuestions","_Users_liuyu_react_exam_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_ref","call","put","result","wrap","_context","prev","next","questions_id","id","sent","code","type","data","stop","this","action","_ref2","select","keys","ids","localData","_context2","store","forEach","item","key","JSON","parse","localStorage","getItem","_ref3","timer","_context3","setTimeout","UtilGlobal","changeState","isOpen","clearTimeout","_ref4","_context4"],"mappings":"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","file":"static/js/4.b13c1830.chunk.js","sourcesContent":["import request from '../utils/request'\n// 获取所有的考试类型\nexport function getAllExamType(){\n    return request('/exam/examType');\n}\n// 获取所有的试题类型\nexport function getAllQuestionsType(){\n    return request('/exam/getQuestionsType');\n}\n// 获取所有的课程\nexport function getAllSubject(){\n    return request('/exam/subject');\n}\n// 添加试题\nexport function addQuestions(questionsInfo){\n    return request('/exam/questions',{\n        method:'POST',\n        body:questionsInfo,\n    });\n}\n// 获取试题\nexport function getQusetions(payload){\n    let arr = [];\n    for(let i in payload){\n        if (payload[i]) {\n            arr.push(`${i}=${payload[i]}`);\n        }\n    }\n    let str = '?'+arr.join('&');\n    console.log(str)\n    return request(`/exam/questions/condition${str}`);\n}\n\n// 更新试题\n\nexport function updateQUestions(updated){\n    return request('/exam/questions/update',{\n        method:'PUT',\n        body:updated\n    });\n}","import {\n    getAllExamType,\n    getAllQuestionsType,\n    getAllSubject,\n    addQuestions,\n    updateQUestions,\n    getQusetions\n} from '@/service/questionsManger'\nimport UtilGlobal from '../../utils/global'\nfunction requestData(){\n    return Promise.all([getAllExamType(),getAllQuestionsType(),getAllSubject()]);\n}\nexport default {\n    namespace:'addQuestions',\n    state:{\n        examType:[],\n        exam_id:'',\n        questionsType:[],\n        questions_type_id:'',\n        subject:[],\n        subject_id:'',\n        title:'', //题目标题\n        questions_stem:'', // 题干\n        questions_answer:'',// 答案\n        addStatus:0, // 0 未提交 1提交成功 2 提交中 3 提交失败\n        updatedStatus:0\n    },\n    reducers:{\n        initData(state,payload){ // 初始化数据\n            return {...state,...payload}\n        }\n    },\n    effects:{\n        *getQuestions(payload, {call,put}){\n            console.log(payload)\n            let result = yield call(getQusetions, {\n                questions_id: payload.id\n            });\n            if(result.code === 1){\n                yield put({type:'initData',...result.data[0]});\n            }\n        },\n        *requestData(action,{call,put,select}){\n            let state = yield select(store=>store.addQuestions);\n            let result = yield call(requestData);\n            let keys = ['examType','questionsType','subject'];\n            let ids = ['exam_id','questions_type_id','subject_id']\n            let payload = {};\n            result.forEach((item,key)=>{\n                if(item){\n                    payload[keys[key]] = item.data;\n                    if(!state[ids[key]]){\n                        payload[ids[key]] = item.data[0][ids[key]];\n                    }\n                }\n            });\n            let localData = JSON.parse(localStorage.getItem('editQuestionsInfo'));\n            if(localData){\n                payload = {...payload,...localData}\n            }\n            yield put({type:'initData',...payload});\n        },\n        *addQuestions(payload,{call,put}){\n            let timer = setTimeout(()=>{\n                UtilGlobal.changeState({isOpen:true});\n            },500);\n            yield put({type:'initData',addStatus:2});\n            let result = yield call(addQuestions,payload);\n            clearTimeout(timer);\n            UtilGlobal.changeState({isOpen:false});\n            if(result.code === 1){\n                yield put({type:'initData',addStatus:1});\n            }else{\n                yield put({type:'initData',addStatus:3});\n            }\n        },\n        *updateQUestions(payload,{call,put}){\n            let timer = setTimeout(()=>{\n                UtilGlobal.changeState({isOpen:true});\n            },500);\n            yield put({type:'initData',updatedStatus:2});\n            let {\n                title,\n                questions_stem,\n                questions_answer,\n                subject_id,\n                questions_type_id,\n                exam_id,\n                questions_id\n            } = payload;\n            let result = yield call(updateQUestions,{\n                title,\n                questions_stem,\n                questions_answer,\n                subject_id,\n                questions_type_id,\n                exam_id,\n                questions_id\n            });\n            clearTimeout(timer);\n            UtilGlobal.changeState({isOpen:false});\n            if(result.code === 1){\n                yield put({type:'initData',updatedStatus:1});\n            }else{\n                yield put({type:'initData',updatedStatus:3});\n            }\n        }\n    }\n\n}"],"sourceRoot":""}